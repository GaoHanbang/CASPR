% Library of file management utilities
%
% Author        : Jonathan EDEN
% Created       : 2014
% Description   :
classdef FileOperations
    methods(Static)
        function CompileCModel()
            % Setup the homepath and files
            CASPR_homepath = CASPR_configuration.LoadHomePath;
            if(exist([CASPR_homepath,'/data/model_config/tmp_compilations'],'dir'))
                build_folder = [CASPR_homepath,'/data/model_config/tmp_compilations/cpp_build'];
                source_files = {[CASPR_homepath,'/data/model_config/tmp_compilations/Bodies/compile_C.m'],...
                    [CASPR_homepath,'/data/model_config/tmp_compilations/Bodies/compile_C_b.m'],...
                    [CASPR_homepath,'/data/model_config/tmp_compilations/Bodies/compile_G.m'],...
                    [CASPR_homepath,'/data/model_config/tmp_compilations/Bodies/compile_G_b.m'],...
                    [CASPR_homepath,'/data/model_config/tmp_compilations/Bodies/compile_M.m'],...
                    [CASPR_homepath,'/data/model_config/tmp_compilations/Bodies/compile_M_b.m'],...
                    [CASPR_homepath,'/data/model_config/tmp_compilations/Bodies/compile_W.m'],...
                    [CASPR_homepath,'/data/model_config/tmp_compilations/Bodies/compile_x_dot.m'],...
                    [CASPR_homepath,'/data/model_config/tmp_compilations/Bodies/compile_x_ddot.m'],...
                    [CASPR_homepath,'/data/model_config/tmp_compilations/Cables/compile_lengths.m'],...
                    [CASPR_homepath,'/data/model_config/tmp_compilations/Cables/compile_V.m'],...
                    [CASPR_homepath,'/data/model_config/tmp_compilations/compile_L.m']};
                input_data = {zeros(6,1),zeros(6,1),zeros(6,1),zeros(6,1)};
                output_filename = 'compiled_library';
                % Config
                code_config = coder.config('lib');
                code_config.IncludeTerminateFcn = false;
                code_config.SupportNonFinite = false;
                code_config.SaturateOnIntegerOverflow = false;
                code_config.GenerateExampleMain = 'DoNotGenerate';
                code_config.TargetLang = 'C++';
                % Code generation
                str = ['codegen -d ', build_folder, ' -o ', output_filename, ' -config code_config ', source_files{1},' -args input_data ',...
                    source_files{2},' -args input_data ',source_files{3},' -args input_data ',...
                    source_files{4},' -args input_data ',source_files{5},' -args input_data ',...
                    source_files{6},' -args input_data ',source_files{7},' -args input_data ',...
                    source_files{8},' -args input_data ',source_files{9},' -args input_data ',...
                    source_files{10},' -args input_data ',source_files{11},' -args input_data ',...
                    source_files{12},' -args input_data'];
                eval(str)
                % Remove unnecessary stuff
                rmdir([build_folder,'/examples']);
                delete([build_folder,'/*.mat']);
            end
        end
    end
end